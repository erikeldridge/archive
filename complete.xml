<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
	<meta>
		<author>Erik Eldridge</author>
		<description>Unit tests for oauth.xml</description>
		<sampleQuery>use 'http://gist.github.com/yql/yql-tables/raw/master/openid/openid.normalize.xml' as openid.normalize; use 'http://example.com/openid-oauth-yql-yui-party/complete.xml' as complete; select * from complete where oauthConsumerKey='exampleTDNTVXpvRnpsbjJHJmQ9WVdrOVpXRlBkWEJETm1zbWNHbzlNQS0tJnM9Y29uc3VtZXJzZWNyZXQmeD0wYw--' and assert='http%3A%2F%2Fexample.com%2Fopenid-oauth-yql-yui-party%2Freturn_to.html%3Fopenid.ns%3Dhttp%253A%252F%252Fspecs.openid.net%252Fauth%252F2.0%26openid.mode%3Did_res%26openid.return_to%3Dhttp%253A%252F%252Fexample.com%252Fopenid-oauth-yql-yui-party%252Freturn_to.html%26openid.claimed_id%3Dhttps%253A%252F%252Fme.yahoo.com%252Fpandayak%2523415d4%26openid.identity%3Dhttps%253A%252F%252Fme.yahoo.com%252Fpandayak%26openid.assoc_handle%3DxPfwnqQQ_EAHBHig9gAEIK2nfKnGzfVQA3eS2Omne.ixZSFqhOpqSw2CSdpT7SraCpDb_LwaIEyQNdDz9Q8eNerStfJ4.c0AUcdRnL43EVN3aKgNPqz6O_heMnA2PYU-%26openid.realm%3Dhttp%253A%252F%252Fexample.com%26openid.ns.oauth%3Dhttp%253A%252F%252Fspecs.openid.net%252Fextensions%252Foauth%252F1.0%26domain_unverified%3D1%26openid.response_nonce%3D2010-05-11T07%253A42%253A54ZsAvZshYNbFOsKxoKAhLHTgpd_WBDCZmllg--%26openid.signed%3Dassoc_handle%252Cclaimed_id%252Cidentity%252Cmode%252Cns%252Cop_endpoint%252Cresponse_nonce%252Creturn_to%252Csigned%252Cpape.auth_level.nist%252Cns.oauth%252Coauth.request_token%26openid.op_endpoint%3Dhttps%253A%252F%252Fopen.login.yahooapis.com%252Fopenid%252Fop%252Fauth%26openid.pape.auth_level.nist%3D0%26openid.oauth.request_token%3DDmgVW6Ru3AYL1sxlxRwapM9GPrUHs0.JXnVQrg3ZM6ms4c6RqYtqKIIklriU0clUr.C8QmGcd6rhweVxfouNmdZtJbgsa2YuuBdfDksk8ycIJVn1NtV04D2lTE5IB_9GBgk3WVE8PTEL0t6uKT9uwBbjiARNETP5JEP2rJQtTv6FRr0A.0LQFx5BvUFuVVBcNsuHwthtDCXUctj8SLQ-%26openid.sig%3DltPr20lchmhd1bDsiT0WfsT%252FZMg%253D' and normalizedOpenid in  ( select id from openid.normalize where id='yahoo.com' )</sampleQuery>
		<documentationURL>http://wiki.github.com/erikeldridge/openid-oauth-yql-yui-party</documentationURL>
	</meta>
	<bindings>
		<select>
			<inputs>
				<key id="oauthConsumerKey" type="xs:string" paramType="variable" required="true"/>
				<key id="normalizedOpenid" type="xs:string" paramType="variable" required="true"/>
				<key id="assert" type="xs:string" paramType="variable" required="true"/>
			</inputs>
			<execute><![CDATA[
			
			//credit: http://javascript.crockford.com/remedial.html
			if (!String.prototype.supplant) {
				String.prototype.supplant = function(o) {
					return this.replace(/{([^{}]*)}/g, function(a, b) {
						var r = o[b];
						return typeof r === 'string' || typeof r === 'number' ? r : a;
					});
				};
			}
			if (!String.prototype.trim) {
				String.prototype.trim = function() {
					return this.replace(/^\s+|\s+$/g, "");
				};
			}

            // parseUri 1.2.2, (c) Steven Levithan <stevenlevithan.com>, MIT License
            function parseUri(e){var d=parseUri.options,a=d.parser[d.strictMode?"strict":"loose"].exec(e),c={},b=14;while(b--){c[d.key[b]]=a[b]||"";}c[d.q.name]={};c[d.key[12]].replace(d.q.parser,function(g,f,h){if(f){c[d.q.name][f]=h;}});return c;}parseUri.options={strictMode:false,key:["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],q:{name:"queryKey",parser:/(?:^|&)([^&=]*)=?([^&]*)/g},parser:{strict:/^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,loose:/^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/}};
            
			//json
			y.include('store://pitrYOXYb8vQfiui4rUYPX');

			//kludge: native y.crypto md5 output doesn't match php's
			//http://code.google.com/p/crypto-js/
			y.include('http://example.com/openid-oauth-yql-yui-party/2.0.0-crypto-md5.js');

			function parseQueryString(str) {
				var pair = null,
					obj = {};
				for each(var params in str.split('&')) {
					pair = params.split('=');
					obj[pair[0]] = decodeURIComponent(pair[1]);
				}
				return obj;
			}

			//fetch assoc by app + OP
			var assocKey = Crypto.MD5(oauthConsumerKey + normalizedOpenid);
			var hash = Crypto.MD5('secret' + assocKey);
			var uri = 'http://example.com/openid-oauth-yql-yui-party/jsonkv.php';
			var req = y.rest(uri).query({
				key: assocKey,
				hash: hash
			}).get();

			//fail if no assoc, or assoc is expired
			if (200 !== req.status) {
				y.log(req);
				response.object = {
					"error": "assoc required"
				};
				y.exit();
			}

			var assoc = JSON.parse(req.response);
			var time = Math.floor(new Date().getTime() / 1000);
			if (!assoc.expires || assoc.expires < time) {
				response.object = {
					"error": "assoc expired. please re-run start.xml to create/store new assoc"
				};
				y.exit();
			}

			var parsedAssert = parseUri(decodeURIComponent(assert));
			var parsedQuery = parseQueryString(parsedAssert['query']);

			//verify assertion
			var query = "use 'http://example.com/yql/openid/openid.verify.xml' as openid.verify;"
			    +"select * from openid.verify where localUrl='{url}' and assertJson='{assert}' and assocJson='{assoc}'".supplant({
				url: parsedAssert['protocol'] + '://' + parsedAssert['host'] + parsedAssert['path'],
				assert: encodeURIComponent(JSON.stringify(parsedQuery)),
				assoc: encodeURIComponent(req.response)
			});

			var results = y.xmlToJson(y.query(query).results);

			if (!results.results.success) {
				y.log(results);
				response.object = {
					"error": "verification failed"
				};
				y.exit();
			}
            
            //exchange request token for access token if it doesn't already exist & store
            y.log("request token: "+parsedQuery['openid.oauth.request_token']);
			
			response.object = {
				"success": ':)'
			};

		]]></execute>
		</select>
	</bindings>
</table>
